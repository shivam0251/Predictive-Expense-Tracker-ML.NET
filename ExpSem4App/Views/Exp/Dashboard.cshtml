@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Tracker Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #4cc9f0;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4bb543;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
        }

        body {
            background-color: #f5f7fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding-top: 20px;
        }

        .dashboard-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1.5rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(67, 97, 238, 0.15);
        }

        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            margin-bottom: 1.5rem;
            background-color: white;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            }

        .card-header {
            border-radius: 10px 10px 0 0 !important;
            background-color: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            font-weight: 600;
            padding: 1rem 1.5rem;
        }

        .stat-card {
            text-align: center;
            padding: 1.5rem;
        }

        .stat-value {
            font-size: 2.2rem;
            font-weight: 700;
            margin: 0.5rem 0;
        }

        .stat-label {
            color: #6c757d;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .income-color {
            color: var(--success-color);
        }

        .expense-color {
            color: var(--danger-color);
        }

        .savings-color {
            color: var(--primary-color);
        }

        .category-card {
            border-radius: 10px;
            text-align: center;
            padding: 1.5rem;
            background-color: white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            transition: 0.3s;
            height: 100%;
            margin-bottom: 1rem;
        }

            .category-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            }

        .category-icon {
            font-size: 2rem;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        .category-title {
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 5px;
        }

        .category-type {
            font-size: 0.85rem;
            color: #6c757d;
            text-transform: capitalize;
        }

        .nav-pills .nav-link.active {
            background-color: var(--primary-color);
        }

        .nav-pills .nav-link {
            color: var(--dark-color);
        }

        .tab-content {
            padding: 1.5rem 0;
        }

        .prediction-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }

        .confidence-badge {
            background-color: rgba(76, 201, 240, 0.1);
            color: var(--primary-color);
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.85rem;
            display: inline-block;
        }

        .chart-container {
            position: relative;
            height: 250px;
            width: 100%;
        }

        .transaction-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
        }

        .income-icon {
            background-color: rgba(75, 181, 67, 0.1);
            color: var(--success-color);
        }

        .expense-icon {
            background-color: rgba(220, 53, 69, 0.1);
            color: var(--danger-color);
        }

        .trend-card {
            background: linear-gradient(135deg, #4361ee, #3f37c9);
            color: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .trend-value {
            font-size: 1.8rem;
            font-weight: 700;
        }

        .trend-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .progress-container {
            height: 8px;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress-bar {
            height: 100%;
        }

        .savings-progress {
            background-color: var(--success-color);
        }

        .expense-progress {
            background-color: var(--danger-color);
        }

        .trend-indicator {
            display: flex;
            align-items: center;
            margin-top: 5px;
            font-size: 0.9rem;
        }

        .trend-up {
            color: var(--success-color);
        }

        .trend-down {
            color: var(--danger-color);
        }

        .view-more-btn {
            display: block;
            width: 100%;
            text-align: center;
            margin-top: 15px;
        }

        .month-selector {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .month-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
        }

        .current-month {
            font-weight: 600;
        }

        @@media (max-width: 768px) {
            .stat-value {
                font-size: 1.8rem;
            }

            .trend-value {
                font-size: 1.5rem;
            }

            .card {
                margin-bottom: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h1><i class="fas fa-wallet me-2"></i> Expense Tracker</h1>
                    <p class="mb-0">Track, analyze and optimize your spending</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <div class="btn-group">
                        <button class="btn btn-outline-light" data-timeframe="today">Today</button>
                        <button class="btn btn-outline-light" data-timeframe="week">This Week</button>
                        <button class="btn btn-outline-light active" data-timeframe="month">This Month</button>
                        <button class="btn btn-outline-light" data-timeframe="custom">Custom</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Stats Row -->
        <div class="row">
            <div class="col-md-4">
                <div class="card stat-card">
                    <div class="stat-label">Total Income</div>
                    <div class="stat-value income-color" id="totalIncome">₹0.00</div>
                    <div class="text-success small" id="incomeTrend"><i class="fas fa-arrow-up me-1"></i> Loading...</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stat-card">
                    <div class="stat-label">Total Expenses</div>
                    <div class="stat-value expense-color" id="totalExpense">₹0.00</div>
                    <div class="text-danger small" id="expenseTrend"><i class="fas fa-arrow-up me-1"></i> Loading...</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stat-card">
                    <div class="stat-label">Savings</div>
                    <div class="stat-value savings-color" id="totalSavings">₹0.00</div>
                    <div class="text-primary small" id="savingsRate"><i class="fas fa-piggy-bank me-1"></i> Loading...</div>
                </div>
            </div>
        </div>

        <!-- Savings & Expense Progress -->
        <div class="row">
            <div class="col-md-6">
                <div class="trend-card">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <div class="trend-label">Income Utilization</div>
                            <div class="trend-value" id="utilizationPercentage">0%</div>
                        </div>
                        <div class="text-end">
                            <div class="trend-label">Savings Rate</div>
                            <div class="trend-value" id="savingsPercentage">0%</div>
                        </div>
                    </div>
                    <div class="progress-container">
                        <div class="progress-bar expense-progress" style="width: 0%"></div>
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <div class="trend-label">Expenses</div>
                        <div class="trend-label">Savings</div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="trend-card">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <div class="trend-label">Monthly Change</div>
                            <div class="trend-value" id="incomeChange">₹0</div>
                        </div>
                        <div class="text-end">
                            <div class="trend-label">Savings Change</div>
                            <div class="trend-value" id="savingsChange">₹0</div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <div class="trend-indicator" id="incomeTrendIndicator">
                            <i class="fas fa-arrow-up me-1"></i> Loading...
                        </div>
                        <div class="trend-indicator" id="savingsTrendIndicator">
                            <i class="fas fa-arrow-up me-1"></i> Loading...
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Left Column -->
            <div class="col-lg-8">
                <!-- Expense Trends -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><i class="fas fa-chart-line me-2"></i> Expense Trends (Last 6 Months)</span>
                        <div class="month-selector">
                            <button class="month-btn"><i class="fas fa-chevron-left"></i></button>
                            <div class="current-month">Loading...</div>
                            <button class="month-btn"><i class="fas fa-chevron-right"></i></button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="expenseTrendChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Expense Forecast -->
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-crystal-ball me-2"></i> Expense Forecast
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="prediction-card">
                                    <h5 id="forecastMonth">Loading...</h5>
                                    <div class="stat-value text-primary my-3" id="forecastAmount">₹0.00</div>
                                    <div class="text-muted mb-3">
                                        <i class="fas fa-calendar-alt me-2"></i> <span id="forecastDateRange">Loading...</span>
                                    </div>
                                    <div class="confidence-badge" id="confidenceRange">
                                        <i class="fas fa-chart-bar me-2"></i>
                                        Confidence: Loading...
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6 class="mb-3">Prediction Analysis</h6>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Historical Accuracy</span>
                                        <strong id="historicalAccuracy">0%</strong>
                                    </div>
                                    <div class="progress mt-1" style="height: 8px;">
                                        <div class="progress-bar bg-success" style="width: 0%" id="accuracyBar"></div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Expected Savings</span>
                                        <strong id="expectedSavings">₹0.00</strong>
                                    </div>
                                    <div class="progress mt-1" style="height: 8px;">
                                        <div class="progress-bar bg-primary" style="width: 0%" id="savingsBar"></div>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Higher Income Potential</span>
                                        <span class="text-success" id="incomePotential">+0%</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span>Expense Reduction Opportunity</span>
                                        <span class="text-danger" id="expenseReduction">-0%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-lg-4">
                <!-- Recent Transactions -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><i class="fas fa-list-ul me-2"></i> Recent Transactions</span>
                        <a href="#" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush" id="recentTransactions">
                            <div class="list-group-item text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Expense Categories -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><i class="fas fa-tags me-2"></i> Top Expense Categories</span>
                        <a href="#" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                    <div class="card-body" id="expenseCategories">
                        <div class="text-center py-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global chart variable
        let expenseTrendChart;

        // Initialize when DOM is loaded
        document.addEventListener("DOMContentLoaded", function() {
            // Initialize charts with empty data
            initializeCharts();

            // Fetch initial data
            fetchDashboardData('month');

            // Setup timeframe buttons
            document.querySelectorAll('.btn-group .btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.btn-group .btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');

                    const timeframe = this.getAttribute('data-timeframe');
                    fetchDashboardData(timeframe);
                });
            });

            // Setup month navigation
            document.querySelectorAll('.month-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    // In a real app, this would load data for adjacent months
                    const currentMonthEl = document.querySelector('.current-month');
                    alert(`Would load data for ${currentMonthEl.textContent} in a real application`);
                });
            });
        });

        function initializeCharts() {
            const trendCtx = document.getElementById('expenseTrendChart').getContext('2d');
            expenseTrendChart = new Chart(trendCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Monthly Expenses',
                        data: [],
                        borderColor: '#4361ee',
                        backgroundColor: 'rgba(67, 97, 238, 0.1)',
                        fill: true,
                        tension: 0.3,
                        pointRadius: 5,
                        pointHoverRadius: 7,
                        pointBackgroundColor: '#fff',
                        pointBorderWidth: 2,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    return `₹${context.parsed.y.toLocaleString('en-IN')}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '₹' + (value/1000).toFixed(0) + 'k';
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

        async function fetchDashboardData() {
            try {
                // Show loading state
                showLoadingState();

                // Call your API endpoint
                const response = await fetch(`https://localhost:7292/api/ExpApi/GetDashboard?userId=4`);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log(data)

                // Update the dashboard with the received data
                updateDashboardUI(data);

            } catch (error) {
                console.error('Error fetching dashboard data:', error);
                showErrorState();
            }
        }

        function showLoadingState() {
            // Update all stat values to show loading
            document.querySelectorAll('.stat-value').forEach(el => {
                el.textContent = 'Loading...';
            });

            // Show loading spinners where appropriate
            document.querySelectorAll('.spinner-border').forEach(el => {
                el.style.display = 'block';
            });
        }

        function showErrorState() {
            // Update all stat values to show error
            document.querySelectorAll('.stat-value').forEach(el => {
                el.textContent = 'Error';
            });

            // Show error messages where appropriate
            document.querySelectorAll('.spinner-border').forEach(el => {
                el.style.display = 'none';
            });

            // You might want to show an error toast/alert here
            alert('Failed to load dashboard data. Please try again later.');
        }

        function updateDashboardUI(data) {
            // Update quick stats
               document.getElementById('totalIncome').textContent = formatCurrency(data.thisMonthIncome);
                document.getElementById('totalExpenses').textContent = formatCurrency(data.thisMonthExpense);
                document.getElementById('totalSavings').textContent = formatCurrency(data.thisMonthSavings);

            // Update trends
            updateIncomeTrend(data.incomeTrend);
            updateExpenseTrend(data.expenseTrend);
            updateSavingsRate(data.totalIncome, data.totalSavings);

            // Update utilization and savings rate
            updateUtilization(data.totalIncome, data.totalExpense);

            // Update monthly changes
            updateMonthlyChanges(data.incomeChange, data.savingsChange);

            // Update the chart
            updateExpenseTrendChart(data.expenseTrendData);

            // Update recent transactions
            updateRecentTransactions(data.recentTransactions);

            // Update expense categories
            updateExpenseCategories(data.topCategories);

            // Update forecast if available
            if (data.forecast) {
                updateForecast(data.forecast);
            }

            // Update current month display
            updateCurrentMonthDisplay(data.currentMonth);
        }

        function formatCurrency(amount) {
            return '₹' + amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

        function updateIncomeTrend(trend) {
            const element = document.getElementById('incomeTrend');
            if (trend.direction === 'up') {
                element.innerHTML = `<i class="fas fa-arrow-up me-1"></i> ${trend.percentage}% from last ${trend.period}`;
                element.className = 'text-success small';
            } else {
                element.innerHTML = `<i class="fas fa-arrow-down me-1"></i> ${trend.percentage}% from last ${trend.period}`;
                element.className = 'text-danger small';
            }
        }

        function updateExpenseTrend(trend) {
            const element = document.getElementById('expenseTrend');
            if (trend.direction === 'up') {
                element.innerHTML = `<i class="fas fa-arrow-up me-1"></i> ${trend.percentage}% from last ${trend.period}`;
                element.className = 'text-danger small';
            } else {
                element.innerHTML = `<i class="fas fa-arrow-down me-1"></i> ${trend.percentage}% from last ${trend.period}`;
                element.className = 'text-success small';
            }
        }

        function updateSavingsRate(income, savings) {
            const rate = (savings / income) * 100;
            document.getElementById('savingsRate').innerHTML =
                `<i class="fas fa-piggy-bank me-1"></i> ${rate.toFixed(2)}% of income`;
        }

        function updateUtilization(income, expenses) {
            const utilization = (expenses / income) * 100;
            const savingsRate = 100 - utilization;

            document.getElementById('utilizationPercentage').textContent = utilization.toFixed(1) + '%';
            document.getElementById('savingsPercentage').textContent = savingsRate.toFixed(1) + '%';

            // Update progress bar
            document.querySelector('.expense-progress').style.width = utilization.toFixed(1) + '%';
        }

                function updateMonthlyChanges(data) {
            // Extract values from the passed data object
            const incomeChangePercent = data.incomeChangePercent;
            const savingsChangePercent = data.savingPercentOfIncome;

            // Get DOM elements
            const incomeChangeEl = document.getElementById('incomeChange');
            const savingsChangeEl = document.getElementById('savingsChange');
            const incomeIndicator = document.getElementById('incomeTrendIndicator');
            const savingsIndicator = document.getElementById('savingsTrendIndicator');

            // Set the raw text for absolute changes if needed
            incomeChangeEl.textContent = (incomeChangePercent >= 0 ? '+' : '-') + Math.abs(incomeChangePercent).toFixed(1) + '%';
            savingsChangeEl.textContent = (savingsChangePercent >= 0 ? '+' : '-') + Math.abs(savingsChangePercent).toFixed(1) + '%';

            // Update trend indicators
            if (incomeChangePercent >= 0) {
                incomeIndicator.innerHTML = `<i class="fas fa-arrow-up me-1"></i> Income +${incomeChangePercent.toFixed(1)}%`;
                incomeIndicator.className = 'trend-indicator trend-up';
            } else {
                incomeIndicator.innerHTML = `<i class="fas fa-arrow-down me-1"></i> Income ${incomeChangePercent.toFixed(1)}%`;
                incomeIndicator.className = 'trend-indicator trend-down';
            }

            if (savingsChangePercent >= 0) {
                savingsIndicator.innerHTML = `<i class="fas fa-arrow-up me-1"></i> Savings +${savingsChangePercent.toFixed(1)}%`;
                savingsIndicator.className = 'trend-indicator trend-up';
            } else {
                savingsIndicator.innerHTML = `<i class="fas fa-arrow-down me-1"></i> Savings ${savingsChangePercent.toFixed(1)}%`;
                savingsIndicator.className = 'trend-indicator trend-down';
            }
        }


        function updateExpenseTrendChart(trendData) {
            expenseTrendChart.data.labels = trendData.labels;
            expenseTrendChart.data.datasets[0].data = trendData.values;
            expenseTrendChart.update();
        }

        function updateRecentTransactions(transactions) {
            const container = document.getElementById('recentTransactions');
            container.innerHTML = '';

            if (transactions.length === 0) {
                container.innerHTML = '<div class="list-group-item text-center py-4">No transactions found</div>';
                return;
            }

            transactions.forEach(transaction => {
                const transactionType = transaction.amount >= 0 ? 'income' : 'expense';
                const iconClass = transactionType === 'income' ? 'income-icon' : 'expense-icon';
                const icon = transactionType === 'income' ? 'fas fa-rupee-sign' : getCategoryIcon(transaction.category);
                const amountClass = transactionType === 'income' ? 'text-success' : 'text-danger';
                const amountSign = transactionType === 'income' ? '+' : '-';

                const transactionEl = document.createElement('div');
                transactionEl.className = 'list-group-item d-flex justify-content-between align-items-center py-3';
                transactionEl.innerHTML = `
                    <div class="d-flex align-items-center">
                        <div class="transaction-icon ${iconClass}">
                            <i class="${icon}"></i>
                        </div>
                        <div>
                            <h6 class="mb-0">${transaction.category}</h6>
                            <small class="text-muted">${transaction.description} - ${formatDate(transaction.date)}</small>
                        </div>
                    </div>
                    <span class="${amountClass}">${amountSign}${formatCurrency(Math.abs(transaction.amount))}</span>
                `;

                container.appendChild(transactionEl);
            });
        }

        function updateExpenseCategories(categories) {
            const container = document.getElementById('expenseCategories');
            container.innerHTML = '';

            if (!categories || categories.length === 0) {
                container.innerHTML = '<div class="text-center py-3">No category data available</div>';
                return;
            }

            // Find the maximum value for percentage calculations
            const maxValue = Math.max(...categories.map(c => c.amount));

            categories.forEach(category => {
                const percentage = (category.amount / maxValue) * 100;
                const progressBarClass = getProgressBarClass(category.name);

                const categoryEl = document.createElement('div');
                categoryEl.className = 'mb-3';
                categoryEl.innerHTML = `
                    <div class="d-flex justify-content-between mb-1">
                        <span>${category.name}</span>
                        <span>${formatCurrency(category.amount)}</span>
                    </div>
                    <div class="progress" style="height: 10px;">
                        <div class="progress-bar ${progressBarClass}" style="width: ${percentage}%"></div>
                    </div>
                `;

                container.appendChild(categoryEl);
            });
        }

        function updateForecast(forecast) {
            document.getElementById('forecastMonth').textContent = forecast.month + ' Prediction';
            document.getElementById('forecastAmount').textContent = formatCurrency(forecast.amount);
            document.getElementById('forecastDateRange').textContent = forecast.dateRange;
            document.getElementById('confidenceRange').innerHTML = `
                <i class="fas fa-chart-bar me-2"></i>
                Confidence: ${formatCurrency(forecast.confidenceLow)} - ${formatCurrency(forecast.confidenceHigh)}
            `;

            document.getElementById('historicalAccuracy').textContent = forecast.accuracy + '%';
            document.getElementById('accuracyBar').style.width = forecast.accuracy + '%';

            document.getElementById('expectedSavings').textContent = formatCurrency(forecast.expectedSavings);
            document.getElementById('savingsBar').style.width = forecast.savingsPercentage + '%';

            document.getElementById('incomePotential').textContent = '+' + forecast.incomePotential + '%';
            document.getElementById('expenseReduction').textContent = '-' + forecast.expenseReduction + '%';
        }

        function updateCurrentMonthDisplay(monthYear) {
            document.querySelector('.current-month').textContent = monthYear;
        }

        function getCategoryIcon(category) {
            const icons = {
                'Groceries': 'fas fa-shopping-basket',
                'Home': 'fas fa-home',
                'Transportation': 'fas fa-car',
                'Entertainment': 'fas fa-film',
                'Utilities': 'fas fa-bolt',
                'Medical': 'fas fa-first-aid',
                'Gifts': 'fas fa-gift',
                'Dining': 'fas fa-utensils',
                'Shopping': 'fas fa-shopping-bag',
                'Education': 'fas fa-book',
                'Travel': 'fas fa-plane'
            };
            return icons[category] || 'fas fa-wallet';
        }

        function getProgressBarClass(category) {
            const classes = {
                'Groceries': 'bg-primary',
                'Home': 'bg-info',
                'Transportation': 'bg-warning',
                'Entertainment': 'bg-danger',
                'Utilities': 'bg-success',
                'Medical': 'bg-secondary',
                'Gifts': 'bg-dark'
            };
            return classes[category] || 'bg-primary';
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const today = new Date();

            if (date.toDateString() === today.toDateString()) {
                return 'Today';
            }

            const yesterday = new Date(today);
            yesterday.setDate(yesterday.getDate() - 1);

            if (date.toDateString() === yesterday.toDateString()) {
                return 'Yesterday';
            }

            return date.toLocaleDateString('en-IN', { month: 'short', day: 'numeric' });
        }
    </script>
</body>
</html>